import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { supabase, getCurrentUser, createPost } from '../lib/supabase';
import Uploader, { FilePreview } from '../components/Uploader';
import type { UploadFileResponse } from '@uploadthing/react';
import type { User } from '../types';

export default function Upload() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<UploadFileResponse[]>([]);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    tags: '',
    isVault: false,
    vaultPrice: '',
  });
  const [error, setError] = useState('');
  const router = useRouter();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const currentUser = await getCurrentUser();
        if (!currentUser) {
          router.push('/login');
          return;
        }

        const { data: profile } = await supabase
          .from('users')
          .select('*')
          .eq('id', currentUser.id)
          .single();

        if (profile) {
          setUser(profile);
        }
      } catch (error) {
        console.error('Auth error:', error);
        router.push('/login');
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, [router]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value,
    }));
  };

  const handleFileUpload = useCallback((files: UploadFileResponse[]) => {
    setUploadedFiles(files);
    setError('');
  }, []);

  const handleFileError = useCallback((error: Error) => {
    setError(`Upload failed: ${error.message}`);
  }, []);

  const handleRemoveFile = useCallback((index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index));
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user || uploadedFiles.length === 0) return;

    setUploading(true);
    setError('');

    try {
      const file = uploadedFiles[0];
      const isVideo = file.type.startsWith('video/');
      
      // Create post record first
      const postData = {
        user_id: user.id,
        title: formData.title,
        description: formData.description || null,
        tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()).filter(Boolean) : [],
        is_vault: formData.isVault,
        vault_price: formData.isVault && formData.vaultPrice ? Math.round(parseFloat(formData.vaultPrice) * 100) : null,
        media_type: isVideo ? 'video' : 'image',
        image_url: isVideo ? null : file.url,
        mux_asset_id: null,
        playback_url: null,
      };

      const { data: post, error: postError } = await createPost(postData);
      if (postError) throw postError;

      // Process video if it's a video file
      if (isVideo) {
        try {
          await fetch('/api/mux/process-video', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              fileUrl: file.url,
              userId: user.id,
              postId: post.id,
              title: formData.title,
              description: formData.description,
            }),
          });
        } catch (videoError) {
          console.error('Video processing error:', videoError);
          // Don't fail the entire upload if video processing fails
          // The post will be created and video can be processed later
        }
      }

      // Redirect to the post or profile
      router.push(`/profile/${user.id}`);
    } catch (error) {
      console.error('Upload error:', error);
      setError('Failed to create post. Please try again.');
    } finally {
      setUploading(false);
    }
  };

  const validateForm = () => {
    if (!formData.title.trim()) {
      setError('Title is required');
      return false;
    }
    if (uploadedFiles.length === 0) {
      setError('Please upload a file');
      return false;
    }
    if (formData.isVault && (!formData.vaultPrice || parseFloat(formData.vaultPrice) <= 0)) {
      setError('Vault price must be greater than $0');
      return false;
    }
    return true;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4"></div>
          <p className="text-white">Loading...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return null; // Will redirect to login
  }

  return (
    <>
      <Head>
        <title>Upload Content - FeetSocial</title>
        <meta name="description" content="Share your content with the world" />
      </Head>

      <div className="min-h-screen bg-gray-900">
        {/* Header */}
        <header className="bg-gray-800 border-b border-gray-700">
          <div className="max-w-4xl mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <Link href="/" className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold text-sm">FS</span>
                </div>
                <span className="text-white font-bold text-xl">FeetSocial</span>
              </Link>
              <Link
                href="/"
                className="px-4 py-2 text-gray-300 hover:text-white transition-colors"
              >
                Back to Feed
              </Link>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-2xl mx-auto px-4 py-8">
          <div className="space-y-6">
            <div className="text-center">
              <h1 className="text-3xl font-bold text-white mb-2">Share Your Content</h1>
              <p className="text-gray-400">
                Upload images or videos and share them with your audience
              </p>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              {/* File Upload */}
              <div className="bg-gray-800 rounded-lg p-6">
                <h2 className="text-white font-semibold mb-4">Upload Media</h2>
                <Uploader
                  onUploadComplete={handleFileUpload}
                  onUploadError={handleFileError}
                  maxFiles={1}
                  maxSize={500 * 1024 * 1024} // 500MB
                />
                
                {uploadedFiles.length > 0 && (
                  <div className="mt-4">
                    <FilePreview
                      files={uploadedFiles}
                      onRemove={handleRemoveFile}
                    />
                  </div>
                )}
              </div>

              {/* Post Details */}
              <div className="bg-gray-800 rounded-lg p-6 space-y-4">
                <h2 className="text-white font-semibold">Post Details</h2>
                
                {/* Title */}
                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-gray-300 mb-2">
                    Title *
                  </label>
                  <input
                    type="text"
                    id="title"
                    name="title"
                    value={formData.title}
                    onChange={handleInputChange}
                    required
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Give your post a catchy title"
                  />
                </div>

                {/* Description */}
                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-300 mb-2">
                    Description
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    rows={4}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Tell your audience about your content..."
                  />
                </div>

                {/* Tags */}
                <div>
                  <label htmlFor="tags" className="block text-sm font-medium text-gray-300 mb-2">
                    Tags
                  </label>
                  <input
                    type="text"
                    id="tags"
                    name="tags"
                    value={formData.tags}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="art, photography, nature (comma separated)"
                  />
                  <p className="text-gray-400 text-xs mt-1">
                    Separate tags with commas
                  </p>
                </div>
              </div>

              {/* Vault Settings */}
              {user.is_creator && (
                <div className="bg-gray-800 rounded-lg p-6 space-y-4">
                  <h2 className="text-white font-semibold">Monetization</h2>
                  
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      id="isVault"
                      name="isVault"
                      checked={formData.isVault}
                      onChange={handleInputChange}
                      className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-600 bg-gray-700 rounded"
                    />
                    <label htmlFor="isVault" className="ml-2 block text-sm text-gray-300">
                      Make this premium content (requires payment to view)
                    </label>
                  </div>

                  {formData.isVault && (
                    <div>
                      <label htmlFor="vaultPrice" className="block text-sm font-medium text-gray-300 mb-2">
                        Price (USD) *
                      </label>
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <span className="text-gray-400 sm:text-sm">$</span>
                        </div>
                        <input
                          type="number"
                          id="vaultPrice"
                          name="vaultPrice"
                          value={formData.vaultPrice}
                          onChange={handleInputChange}
                          min="0.01"
                          step="0.01"
                          required
                          className="w-full pl-7 pr-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                          placeholder="0.00"
                        />
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Error Message */}
              {error && (
                <div className="bg-red-900/50 border border-red-700 rounded-lg p-4">
                  <p className="text-red-200">{error}</p>
                </div>
              )}

              {/* Submit Button */}
              <div className="flex justify-end space-x-4">
                <Link
                  href="/"
                  className="px-6 py-2 border border-gray-600 text-gray-300 rounded-lg hover:bg-gray-800 transition-colors"
                >
                  Cancel
                </Link>
                <button
                  type="submit"
                  disabled={uploading || !validateForm()}
                  onClick={(e) => {
                    if (!validateForm()) {
                      e.preventDefault();
                    }
                  }}
                  className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {uploading ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>Publishing...</span>
                    </div>
                  ) : (
                    'Publish Post'
                  )}
                </button>
              </div>
            </form>
          </div>
        </main>
      </div>
    </>
  );
}

